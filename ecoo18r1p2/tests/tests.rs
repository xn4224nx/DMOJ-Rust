/*
 * Tests for main.rs
 */

use assert_cmd::Command;

#[test]
fn exp_01() {
    let mut cmd = Command::cargo_bin("ecoo18r1p2").unwrap();
    let assert = cmd
        .write_stdin(concat!(
            "3\n",
            "1 6 4 5 2 6 3 2\n",
            "2 3 2 3 4\n",
            "3 4 2 3 2 4\n",
            "4\n",
            "1 2 3 4\n",
            "2 3 4 2 4\n",
            "3 7 2 3 3 4 5 2 6\n",
            "4 5 3 2 5 1 4\n",
            "3\n",
            "1 6 4 5 2 6 3 2\n",
            "2 3 2 3 4\n",
            "3 4 2 3 2 4\n",
            "4\n",
            "1 2 3 4\n",
            "2 3 4 2 4\n",
            "3 7 2 3 3 4 5 2 6\n",
            "4 5 3 2 5 1 4\n",
            "3\n",
            "1 6 4 5 2 6 3 2\n",
            "2 3 2 3 4\n",
            "3 4 2 3 2 4\n",
            "4\n",
            "1 2 3 4\n",
            "2 3 4 2 4\n",
            "3 7 2 3 3 4 5 2 6\n",
            "4 5 3 2 5 1 4\n",
            "3\n",
            "1 6 4 5 2 6 3 2\n",
            "2 3 2 3 4\n",
            "3 4 2 3 2 4\n",
            "4\n",
            "1 2 3 4\n",
            "2 3 4 2 4\n",
            "3 7 2 3 3 4 5 2 6\n",
            "4 5 3 2 5 1 4\n",
            "3\n",
            "1 6 4 5 2 6 3 2\n",
            "2 3 2 3 4\n",
            "3 4 2 3 2 4\n",
            "4\n",
            "1 2 3 4\n",
            "2 3 4 2 4\n",
            "3 7 2 3 3 4 5 2 6\n",
            "4 5 3 2 5 1 4\n",
        ))
        .assert();
    assert.success().stdout(concat!(
        "2 {1,2,3}\n",
        "1 {4}\n",
        "2 {1,2,3}\n",
        "1 {4}\n",
        "2 {1,2,3}\n",
        "1 {4}\n",
        "2 {1,2,3}\n",
        "1 {4}\n",
        "2 {1,2,3}\n",
        "1 {4}\n",
    ));
}
